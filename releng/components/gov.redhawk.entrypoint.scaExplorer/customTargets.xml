<project name="customTargets overrides" >
    <import file="${eclipse.pdebuild.templates}/headless-build/customTargets.xml"/>

    <!-- ===================================================================== -->
    <!-- Check out map files from correct repository -->
    <!-- Replace values for mapsCheckoutTag as desired. -->
    <!-- ===================================================================== -->
    <target name="getMapFiles">
        <copy todir="${buildDirectory}/maps">
            <fileset dir="${mapsDirectory}"/>
        </copy>
        <replace dir="${buildDirectory}/maps" token="@REPO@" value="${gitroot}"/>
        <replace dir="${buildDirectory}/maps" token="@TAG@" value="${tag}"/>
    </target>

    <!-- ===================================================================== -->
    <!--  Steps to do after the repositories have been processed -->
    <!-- ===================================================================== -->
    <target name="postProcessRepos">
        <mkdir dir="${buildDirectory}/${buildLabel}"/>
        <symlink link="${buildDirectory}/ouptut" resource="${buildDirectory}/${buildLabel}" overwrite="true"/>
        <unzip src="${buildDirectory}/${deltapack}" dest="${buildDirectory}/target"/>
    </target>

    
    <target name="postFetch">
        <replace dir="${buildDirectory}/plugins" value="${qualifier}" token="@buildID@"/>
        <replace dir="${buildDirectory}/plugins" value="${buildLabel}" token="@buildLabel@"/>
    </target>

    <!-- ===================================================================== -->
    <!-- Steps to do after the build is done. -->
    <!-- ===================================================================== -->
    <target name="postBuild" depends="gatherLogs,createWebApp">
    
    </target>

    <target name="createWebApp">
         <property name="webappRepo" value="${buildDirectory}/${buildLabel}/repository/${webapp.name}"/>
         <property name="webappLocation" value="${buildDirectory}/${buildLabel}/${webapp.name}"/>
         <mkdir dir="${webappLocation}/WEB-INF/eclipse"/>
         <mkdir dir="${webappLocation}/WEB-INF/lib"/>

     <!--Mirror the target and entrypoint repos together and then transform them to runnable format-->
         <p2.mirror>
            <source location="${buildDirectory}/target/eclipse"/>
            <source location="${buildDirectory}/${buildLabel}/p2/gov.redhawk.entrypoint.scaExplorer"/>
            <destination location="${webappRepo}"/>
            <iu id="gov.redhawk.entrypoint.scaExplorer.feature.feature.group"/>
            <!--Not sure why this iu needs to be explicitly listed here for repo2runnable to work correctly-->
            <iu id="org.eclipse.emf.workspace"/>
        </p2.mirror>
        <p2.repo2runnable failOnError="true">
            <source location="${webappRepo}"/>
            <destination location="${webappLocation}/WEB-INF/eclipse"/>
        </p2.repo2runnable>

         <!-- Delete the p2 metadata from the webapp -->
         <delete>
             <fileset dir="${webappLocation}/WEB-INF/eclipse" includes="artifacts.jar, content.jar"/>
         </delete>

         <!-- Copy the webapp template from the feature into the main webapp location -->
         <copy todir="${webappLocation}">
             <fileset dir="${webappLocation}/WEB-INF/eclipse/features/gov.redhawk.entrypoint.scaExplorer.feature_1.9.0.${qualifier}/templates"/>
         </copy>
         <war destfile="${buildDirectory}/${buildLabel}/sca.war" webxml="${webappLocation}/WEB-INF/web.xml" basedir="${webappLocation}" includes="WEB-INF/eclipse/**, WEB-INF/web.xml">
             <lib dir="${webappLocation}/WEB-INF/lib" />
         </war>
    </target>
    <!-- ===================================================================== -->
    <!-- Steps to do to publish the build results -->
    <!-- ===================================================================== -->
    <target name="publish" depends="shouldPublish" if="p2.should.publish">
        <p2.mirror>
            <source location="file:${buildDirectory}/${buildLabel}/p2/${projectName}.sdk"/>
            <destination location="file:${publishBase}/${buildLabel}.${qualifier}"/>
            <iu query="property[@name='org.eclipse.equinox.p2.type.category']"/>
        </p2.mirror>
        <symlink resource="${publishBase}/${buildLabel}.${qualifier}" link="${publishBase}/latest" overwrite="true"/>
    </target>

    <target name="shouldPublish">
        <condition property="p2.should.publish">
            <or>
                <equals arg1="${publishP2}" arg2="true" casesensitive="false"/>
                <equals arg1="${publishP2}" arg2="1" casesensitive="false"/>
            </or>
        </condition>
    </target>

</project>
