<?xml version="1.0" encoding="UTF-8"?>
<!--
     REDHAWK HEADER
 
     Identification: $Revision: 3697 $
-->

<!--
	To build the RAP version of the SCA Explorer:
	
	1. Ensure that all plug-ins defined in gov.redhawk.entrypoint.scaExplorer.feature are in your workspace. This includes
	   plugins directly incorporated into the feature as well as those defined in any incldued features.
	2. Ensure one of the following plugins is available, either in your workspace or in an external file system location:
	   org.eclipse.equinox.servletbridge OR org.eclipse.equinox.servletbridge.template.
	3. Configure properties in sca.properties to point to one of the plug-ins from step 2, to either copy a pre-generated
	   servlet bridge jar file to the web app lib dirrctory, or copy one built from source code. (See note below on Servlet
	   Bridge Configuration, and comments in sca.properties)
	4. Run this script using ant. Before running, open the eclipse luancher for the script (Right-click script file -> Run As -> Ant Build...),
	   and on the JRE tab, select the option "Run in the same JRE as the workspace". If you see an error stating that the pde.exportFeatures
	   task cannot be found, it probably means this setting has not been made.
	5. The script will generate output to the "build" directory. You must wait for task pde.exportFeatures to complete, by looking at the progress bar,
	   before executing the next step.
	6. Run the buildWar task. This will generate the WAR file dist/sca.war.
	7. Deploy this WAR file to a Servlet container that supports Servlet 2.3.0 to 2.5.0 inclusive (e.g. Tomcat 5.x or tomcat 6.x).
	   When RAP 1.4 is available, it will be compatible with the Servlet API up to Servlet 3.0, which is supported by Tomcat 7.x.
	8. View to the SCA Explorer in a web broswser at the following URL: https://<host-name>:8443/sca/sca?startup=go.

-->

<!-- ***** Servlet Bridge Configuration *****

	The WAR file created by this script deploys a RAP application inside a JEE-compliant web app. The eclipse plug-ins (the Equinox run-time
	as well as the RAP app and its dependencies) are deployed to <web-app-context-dir>/WEB-INF/eclipse, analagous to where the "classes" directory
	is found in a traditional web app. A "Bridge Servlet" (jar file org.eclipse.equinox.servletbridge_<version>.jar) is deployed to
	<web-app-context-dir>/WEB-INF/lib. This servlet receives HTTP requests forwarded by the Servlet container and delegates them to the
	appropriate service in the Equinox run-time embedded in the web app. Plug-in org.eclipse.equinox.http.servletbridge, provided in the RAP
	target, handles the delegated request.
	
	According to bugzilla entries 291396 and 293020, the servletbridge jar file should be copied from plugin org.eclipse.equinox.servletbridge.template
	rather than being built from plugin org.eclipse.equinox.servletbridge. This script supports either approach. However, either way the result is a
	servletbridge bundle that fails to import and re-export package javax.servlet. To make the web app work, an init parameter is set for servlet
	BridgeServlet, to cause the framework to generate a servletbridge jar file and use it to override the one deployed by this script. This script
	is configured to copy the jar file from  org.eclipse.equinox.servletbridge.template. See comments in the script for instructions on building the
	servletbridge jar file from source code instead, if desired. The servletbridge jar file must be deployed to the web app lib directory by some means,
	even though it is to be overridden by the one generated by the framework, or the web app will not initialize properly. In templates/WEB-INF/web.xml,
	use init param overrideAndReplaceExtensionBundle to control framework generation of the servletbridge jar file.
-->

<project name="project" default="default">
  <description>
    A build script to package the SCA Navigator RAP application as a WAR file. The script came with
  	plugin org.eclipse.rap.demo, and was modified to work for the SCA Navigator app. It deploys
  	the equinox run-time and the SCA Navigator plug-ins and features in the web app, with dir 'eclipse' placed
  	where dir "classes' is in a traditional web app. The script also deploys a servlet bridge jar file in
  	the lib dir of the web app, which imports package javax.servlet from the servlet container and re-exports
	it to the plug-ins in the RAP app which depend on it.
  </description>

  <!-- ================================= 
          target: init              
         ================================= -->
  <target name="init">
    <property name="proj.dir" value="${basedir}/.." />
  	<property file="${basedir}/../src/resources/sca.properties" />
    <!-- 
		On windows be cautious about long file names for ${build.dir}
		These long path problems were resolved in JRE 1.5.0_08
		-->
    <property name="build.dir" value="${proj.dir}/build" />
  	<property name="dist.dir" value="${proj.dir}/dist" />
    <property name="templates.dir" value="${proj.dir}/templates" />
    <property name="webapp.name" value="sca" />
    <property name="features" value="gov.redhawk.entrypoint.scaExplorer.feature" />
  
  	<!--
  		The presence of this property indicates that the servlet bridge jar file should be copied from the specified
  		plug-in (as defined by properties servletbridge.template.dir and servletbridge.jar.file.name) rather than
  		compiled and built from source code in org.eclipse.equinox.servletbridge
  	-->
  	<property name="servletbridge.jar-present" value="true" />
    <!--
		If you are using this script in a head-less build define property "ignore.pdeExportFeatures"
		(The pdeExportFeatures task is available only in the IDE - do the feature export with PDE Build instead)
	-->
  	<!-- <property name="ignore.pdeExportFeatures" value="true" /> -->
  	
  	<!-- Define property "ignore.servletbridge.jar" if you're providing the servletbridge jar file to the web app apart from this script. -->
  	
  	<!-- <property name="ignore.servletbridge.jar" value="true" /> -->
  </target>

  <!-- ================================= 
          target: prepare              
         ================================= -->
  <target name="prepare" depends="init">
    <delete dir="${build.dir}/${webapp.name}" />
    <mkdir dir="${build.dir}/${webapp.name}/WEB-INF/lib" />
  </target>
	
	 <!-- ================================= 
	          target: prepareWar              
	         ================================= -->
	  <target name="prepareWar" depends="init">
	    <delete dir="${dist.dir}" />
	  	<mkdir dir="${dist.dir}" />
	  </target>

  <!-- ================================= 
          target: default              
         ================================= -->
  <target name="default"
          depends="copyResources, servletbridge.jar, pdeExportFeatures" />

  <!-- ================================= 
          target: copyResources              
         ================================= -->
  <target name="copyResources" depends="prepare">
    <copy todir="${build.dir}/${webapp.name}">
      <fileset dir="${templates.dir}" />
    </copy>
  </target>

  <!-- ================================= 
          target: servletbridge.jar              
         ================================= -->
  <target name="servletbridge.jar"
          depends="prepare"
          unless="ignore.servletbridge.jar">
     <antcall target="jar-servletbridge.jar" />
     <antcall target="copy-servletbridge.jar" />
  </target>

  <!-- ================================= 
          target: copy-servletbridge.jar              
         ================================= -->

  <target name="copy-servletbridge.jar" if="servletbridge.jar-present">
    <copy todir="${build.dir}/${webapp.name}/WEB-INF/lib">
      <!-- Include this line to copy the servlet bridge jar file built from source code -->
      <!-- <fileset file="${proj.dir}/../${servletbridge.dir}/servletbridge.jar" /> -->
    	
      <!-- Include this line to copy the provided pre-built servlet bridge jar file -->
      <fileset file="${proj.dir}/../${servletbridge.template.dir}/${servletbridge.jar.file.name}" />
    </copy>
  </target>

  <!-- ================================= 
          target: jar-servletbridge.jar              
         ================================= -->
  <target name="jar-servletbridge.jar" unless="servletbridge.jar-present">
    <jar destfile="${build.dir}/${webapp.name}/WEB-INF/lib/servletbridge.jar">
      <fileset dir="${proj.dir}/../${servletbridge.dir}/bin">
        <include name="**/*.class" />
      </fileset>
    </jar>
  </target>
	
  <!-- ================================= 
          target: pdeExportFeatures              
         ================================= -->
  <target name="pdeExportFeatures"
          depends="prepare"
          unless="ignore.pdeExportFeatures">
    <!-- 
		Features get built asynchronously. Look for PDEBuild task progress in the status line.
		So that the pde.exportFeatures task is available in the IDE, select 
		"Run in the same JRE as the workspace" from the JRE tab from "Run Ant.."
		-->
    <pde.exportFeatures features="${features}"
                        destination="${build.dir}/${webapp.name}/WEB-INF/eclipse"
                        exportType="directory"
                        useJARFormat="false"
                        exportSource="false" />
  </target>
	
	 <!-- ================================= 
	          target: buildWar              
	         ================================= -->
	  <target name="buildWar"
	          depends="prepareWar">
	     <war destfile="${dist.dir}/sca.war" webxml="${build.dir}/${webapp.name}/WEB-INF/web.xml" basedir="${build.dir}/${webapp.name}" includes="WEB-INF/eclipse/**, WEB-INF/web.xml">
	     	<lib dir="${build.dir}/${webapp.name}/WEB-INF/lib" />
	     </war>
	  </target>
</project>

